// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	service "article-service/internal/service"

	mock "github.com/stretchr/testify/mock"
)

// IArticle is an autogenerated mock type for the IArticle type
type IArticle struct {
	mock.Mock
}

type IArticle_Expecter struct {
	mock *mock.Mock
}

func (_m *IArticle) EXPECT() *IArticle_Expecter {
	return &IArticle_Expecter{mock: &_m.Mock}
}

// GetAllArticles provides a mock function with given fields:
func (_m *IArticle) GetAllArticles() ([]*service.Article, error) {
	ret := _m.Called()

	var r0 []*service.Article
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*service.Article, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*service.Article); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*service.Article)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IArticle_GetAllArticles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllArticles'
type IArticle_GetAllArticles_Call struct {
	*mock.Call
}

// GetAllArticles is a helper method to define mock.On call
func (_e *IArticle_Expecter) GetAllArticles() *IArticle_GetAllArticles_Call {
	return &IArticle_GetAllArticles_Call{Call: _e.mock.On("GetAllArticles")}
}

func (_c *IArticle_GetAllArticles_Call) Run(run func()) *IArticle_GetAllArticles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *IArticle_GetAllArticles_Call) Return(_a0 []*service.Article, _a1 error) *IArticle_GetAllArticles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IArticle_GetAllArticles_Call) RunAndReturn(run func() ([]*service.Article, error)) *IArticle_GetAllArticles_Call {
	_c.Call.Return(run)
	return _c
}

// GetArticleByID provides a mock function with given fields: id
func (_m *IArticle) GetArticleByID(id string) (*service.Article, error) {
	ret := _m.Called(id)

	var r0 *service.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*service.Article, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *service.Article); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IArticle_GetArticleByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArticleByID'
type IArticle_GetArticleByID_Call struct {
	*mock.Call
}

// GetArticleByID is a helper method to define mock.On call
//   - id string
func (_e *IArticle_Expecter) GetArticleByID(id interface{}) *IArticle_GetArticleByID_Call {
	return &IArticle_GetArticleByID_Call{Call: _e.mock.On("GetArticleByID", id)}
}

func (_c *IArticle_GetArticleByID_Call) Run(run func(id string)) *IArticle_GetArticleByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IArticle_GetArticleByID_Call) Return(_a0 *service.Article, _a1 error) *IArticle_GetArticleByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IArticle_GetArticleByID_Call) RunAndReturn(run func(string) (*service.Article, error)) *IArticle_GetArticleByID_Call {
	_c.Call.Return(run)
	return _c
}

// SaveArticle provides a mock function with given fields: article
func (_m *IArticle) SaveArticle(article *service.Article) error {
	ret := _m.Called(article)

	var r0 error
	if rf, ok := ret.Get(0).(func(*service.Article) error); ok {
		r0 = rf(article)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IArticle_SaveArticle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveArticle'
type IArticle_SaveArticle_Call struct {
	*mock.Call
}

// SaveArticle is a helper method to define mock.On call
//   - article *service.Article
func (_e *IArticle_Expecter) SaveArticle(article interface{}) *IArticle_SaveArticle_Call {
	return &IArticle_SaveArticle_Call{Call: _e.mock.On("SaveArticle", article)}
}

func (_c *IArticle_SaveArticle_Call) Run(run func(article *service.Article)) *IArticle_SaveArticle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*service.Article))
	})
	return _c
}

func (_c *IArticle_SaveArticle_Call) Return(err error) *IArticle_SaveArticle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *IArticle_SaveArticle_Call) RunAndReturn(run func(*service.Article) error) *IArticle_SaveArticle_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIArticle interface {
	mock.TestingT
	Cleanup(func())
}

// NewIArticle creates a new instance of IArticle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIArticle(t mockConstructorTestingTNewIArticle) *IArticle {
	mock := &IArticle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
